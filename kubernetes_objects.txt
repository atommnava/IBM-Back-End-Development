Step 1: Verify kubectl Version

kubectl version

Task 1: Create a Kubernetes Service using nginx image
1. Create a Deployment named my-deployment1 using the nginx image

kubectl create deployment my-deployment1 --image=nginx

2. Expose the deployment as a service

kubectl expose deployment my-deployment1 --port=80 --type=NodePort --name=my-service1

3. Lists all services in the default namespace. Services provide a stable IP address and DNS name for accessing a set of pods.

 kubectl get services

Task 2: Manage Kubernetes Pods and Services

1. Get the list of pods

kubectl get pods

2. Show labels

kubectl get pod <pod-name> --show-labels

3. Label the pod

kubectl label pods <pod-name> environment=deployment

4. Show labels

kubectl get pod <pod-name> --show-labels

5. Run a test pod using the nginx image

kubectl run my-test-pod --image=nginx --restart=Never

This command tells Kubernetes to create a pod named "my-test-pod" using the nginx image, and the pod will not restart automatically if it stops for any reason as we are using --restart=Never.

6. Show logs

kubectl logs <pod-name>

This command retrieves and displays the logs generated by the specified pod, allowing you to troubleshoot issues, monitor activity, and gather information about the pod's behavior.

Task 3: Deploying a StatefulSet

1. Create and open a file named statefulset.yaml in edit mode.

  touch statefulset.yaml

2. Open statefulset.yaml, and add the following code, and save the file:

   apiVersion: apps/v1
   kind: StatefulSet
   metadata:
     name: my-statefulset
   spec:
     serviceName: "nginx"
     replicas: 3
     selector:
       matchLabels:
         app: nginx
     template:
       metadata:
         labels:
           app: nginx
       spec:
         containers:
         - name: nginx
           image: nginx
           ports:
           - containerPort: 80
             name: web
     volumeClaimTemplates:
     - metadata:
         name: www
       spec:
         accessModes: [ "ReadWriteOnce" ]
         resources:
           requests:
             storage: 1Gi

3. Apply the StatefulSet configuration.

kubectl apply -f statefulset.yaml

This command tells Kubernetes to create the resources defined in the YAML file.

4. Verify that the StatefulSet is created.

kubectl get statefulsets

Task 4: Implementing a DaemonSet

A DaemonSet ensures that a copy of a specific Pod runs on all (or some) nodes in the cluster. It is particularly useful for deploying system-level applications that provide essential services across the nodes in a cluster, such as log collection, monitoring, or networking services.

1. Create a file named daemonset.yaml and open it in edit mode:

touch daemonset.yaml

2. Create and open a file named daemonset.yaml in edit mode.

  apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: my-daemonset
  spec:
    selector:
      matchLabels:
        name: my-daemonset
    template:
      metadata:
        labels:
          name: my-daemonset
      spec:
        containers:
        - name: my-daemonset
          image: nginx

3. Apply the DaemonSet

kubectl apply -f daemonset.yaml


4. Verify that the DaemonSet has been created

kubectl get daemonsets

