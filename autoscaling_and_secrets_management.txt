* Clone the repository with the starter code to commence the project.

git clone https://github.com/ibm-developer-skills-network/k8-scaling-and-secrets-mgmt.git

---
Exercise 1: Build and deploy an application to Kubernetes

1. Navigate to the project directory.
cd k8-scaling-and-secrets-mgmt

2. Export your namespace.
export MY_NAMESPACE=sn-labs-$USERNAME 

3. Build the Docker image.
docker build . -t us.icr.io/$MY_NAMESPACE/myapp:v1 

Step 2: Push and list the image
1.1 Push the tagged image to the IBM Cloud Container Registry.
docker push us.icr.io/$MY_NAMESPACE/myapp:v1 

1.2 List all the images available. You will see the newly created myapp image.
ibmcloud cr images

Step 3: Deploy your application

Open the deployment.yaml file located in the main project directory. It's content will be as follows:

Replace <your SN labs namespace> with your actual SN lab's namespace.

Apply the deployment.
kubectl apply -f deployment.yaml

Verify that the application pods are running and accessible.

Start the application on port-forward:
kubectl port-forward deployment.apps/myapp 3000:3000 

* Launch the app on Port 3000 to view the application output.

* You should see the message Hello from MyApp. Your app is up!

* Stop the server before proceeding further by pressing CTRL + C.

* Create a ClusterIP service for exposing the application to the internet:
kubectl expose deployment/myapp

---
Exercise 2: Implement Vertical Pod Autoscaler (VPA)

1. Apply the VPA configuration using the following command:

Step 3: Retrieve the details of the VPA

1. Retrieve the created VPA:
kubectl get vpa

2. Retrieve the details and current running status of the VPA.
kubectl describe vpa myvpa

---
Exercise 3: Implement Horizontal Pod Autoscaler (HPA)

Step 1: Create an HPA configuration

2. Apply the HPA configuration:
kubectl apply -f hpa.yaml

3. Obtain the status of the created HPA resource by executing the following command:
kubectl get hpa myhpa

Step 4: Start the Kubernetes proxy
Open another terminal and start the Kubernetes proxy:
kubectl proxy

Step 5: Spam and increase the load on the app
Open another new terminal and enter the below command to spam the app with multiple requests for increasing the load:

for i in `seq 100000`; do curl -L localhost:8001/api/v1/namespaces/sn-labs-$USERNAME/services/myapp/proxy; done

Step 6: Observe the effect of autoscaling

Run the following command to observe the replicas increase in accordance with the autoscaling:
kubectl get hpa myhpa --watch

Step 7: Observe the details of the HPA
Run the following command to observe the details of the horizontal pod autoscaler:
kubectl get hpa myhpa

----
Exercise 4: Create a Secret and update the deployment

Add the following lines at the end of deployment.yaml:
        env:
        - name: MYAPP_USERNAME
          valueFrom:
            secretKeyRef:
              name: myapp-secret
              key: username
        - name: MYAPP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: myapp-secret
              key: password

Step 3: Apply the secret and deployment
1. Apply the secret using the following command:

kubectl apply -f secret.yaml

2. Apply the updated deployment using the following command:

kubectl apply -f deployment.yaml

Step 4: Verify the secret and deployment

* Run the following command to retrieve the details of myapp-secret showing its name, type, and creation timestamp:
kubectl get secret

* Run the following command to show the status of the deployment, including information about replicas and available replicas.
kubectl get deployment
