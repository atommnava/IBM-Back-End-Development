# 1. Open a new terminal
# 2. Install these must-have packages before you setup the environment to access postgres.

# pip install --upgrade distro-info
# pip3 install --upgrade pip==23.2.1

# 3. Run the following command-lines to download a code template for this lab.

# wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-CD0251EN-SkillsNetwork/labs/m3_django_orm/lab1_template.zip"
# unzip lab1_template.zip
# rm lab1_template.zip

# 4. Go to cd /lab1_template
# 5. Letâ€™s set up a virtual environment which to contain all the packages we need.

pip install virtualenv
virtualenv djangoenv
source djangoenv/bin/activate

pip install -r requirements.txt

In the created project, you could find some important project files:

manage.py is a command-line interface that allows you to interact with and manage your Django project
settings.py contains setting information about this project such as databases or installed Django apps
orm folder is a container for a standalone Django ORM app
orm/models.py contains model definitions

# 6. Open settings.py and scroll to DATABASES section.
# Replace the value of PASSWORD to be the generated PostgreSQL password generated in Step 1.

# 7. Open orm/models.py (under lab1_template/orm/ folder ) and copy / paste the following snippet under comment
class User(models.Model):
    # CharField for user's first name
    first_name = models.CharField(null=False, max_length=30, default='john')
    # CharField for user's last name
    last_name = models.CharField(null=False, max_length=30, default='doe')
    # CharField for user's date for birth
    dob = models.DateField(null=True)

# 8. First, you will need to generate migration scripts for orm app
# python3 manage.py makemigrations orm

orm/migrations folder is where Django stores the changes to your models and you may wonder what SQL statements Django has created for your model migrations.

# You can check the SQL statements by running:
# python3 manage.py sqlmigrate orm 0001

# Next, you can perform the migration to create orm_user table by running:
# python3 manage.py migrate

Django will perform migrations for all the installed apps including orm app.
# Exepceted output
Operations to perform:
  Apply all migrations: orm
Running migrations:
  Applying orm.0001_initial... OK

# Open test.py and you can find a test_setup() method to save a mockup user object and try to
# check if the user object was saved successfully.

# You could run the test.py to test your model:
# python3 test.py

# Expected output: Django Model setup completed.

